/*
INTEL CONFIDENTIAL
Copyright (c) 2018 Intel Corporation

The source code contained or described herein and all documents related to
the source code ("Material") are owned by Intel Corporation or its suppliers
or licensors. Title to the Material remains with Intel Corporation or its
suppliers and licensors. The Material contains trade secrets and proprietary
and confidential information of Intel or its suppliers and licensors. The
Material is protected by worldwide copyright and trade secret laws and treaty
provisions. No part of the Material may be used, copied, reproduced, modified,
published, uploaded, posted, transmitted, distributed, or disclosed in any way
without Intel's prior express written permission.
No license under any patent, copyright, trade secret or other intellectual
property right is granted to or conferred upon you by disclosure or delivery
of the Materials, either expressly, by implication, inducement, estoppel or
otherwise. Any license under such intellectual property rights must be express
and approved by Intel in writing.
*/
// This file was automatically generated by lister-gen

package internalversion

import (
	aggregator "github.com/nervanasystems/carbon/applications/test-exp-service/pkg/apis/aggregator"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RunLister helps list Runs.
type RunLister interface {
	// List lists all Runs in the indexer.
	List(selector labels.Selector) (ret []*aggregator.Run, err error)
	// Runs returns an object that can list and get Runs.
	Runs(namespace string) RunNamespaceLister
	RunListerExpansion
}

// runLister implements the RunLister interface.
type runLister struct {
	indexer cache.Indexer
}

// NewRunLister returns a new RunLister.
func NewRunLister(indexer cache.Indexer) RunLister {
	return &runLister{indexer: indexer}
}

// List lists all Runs in the indexer.
func (s *runLister) List(selector labels.Selector) (ret []*aggregator.Run, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*aggregator.Run))
	})
	return ret, err
}

// Runs returns an object that can list and get Runs.
func (s *runLister) Runs(namespace string) RunNamespaceLister {
	return runNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RunNamespaceLister helps list and get Runs.
type RunNamespaceLister interface {
	// List lists all Runs in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*aggregator.Run, err error)
	// Get retrieves the Run from the indexer for a given namespace and name.
	Get(name string) (*aggregator.Run, error)
	RunNamespaceListerExpansion
}

// runNamespaceLister implements the RunNamespaceLister
// interface.
type runNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Runs in the indexer for a given namespace.
func (s runNamespaceLister) List(selector labels.Selector) (ret []*aggregator.Run, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*aggregator.Run))
	})
	return ret, err
}

// Get retrieves the Run from the indexer for a given namespace and name.
func (s runNamespaceLister) Get(name string) (*aggregator.Run, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(aggregator.Resource("run"), name)
	}
	return obj.(*aggregator.Run), nil
}
