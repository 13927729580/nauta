// +build !ignore_autogenerated

/*
Copyright 2018 Intel Corporation.
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by conversion-gen. DO NOT EDIT.

package v1

import (
	unsafe "unsafe"

	aggregator "github.com/nervanasystems/carbon/applications/experiment-service/pkg/apis/aggregator"
	common "github.com/nervanasystems/carbon/applications/experiment-service/pkg/apis/aggregator/common"
	conversion "k8s.io/apimachinery/pkg/conversion"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

func init() {
	localSchemeBuilder.Register(RegisterConversions)
}

// RegisterConversions adds conversion functions to the given scheme.
// Public to allow building arbitrary schemes.
func RegisterConversions(scheme *runtime.Scheme) error {
	return scheme.AddGeneratedConversionFuncs(
		Convert_v1_Run_To_aggregator_Run,
		Convert_aggregator_Run_To_v1_Run,
		Convert_v1_RunList_To_aggregator_RunList,
		Convert_aggregator_RunList_To_v1_RunList,
		Convert_v1_RunSpec_To_aggregator_RunSpec,
		Convert_aggregator_RunSpec_To_v1_RunSpec,
		Convert_v1_RunStatus_To_aggregator_RunStatus,
		Convert_aggregator_RunStatus_To_v1_RunStatus,
	)
}

func autoConvert_v1_Run_To_aggregator_Run(in *Run, out *aggregator.Run, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if err := Convert_v1_RunSpec_To_aggregator_RunSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	if err := Convert_v1_RunStatus_To_aggregator_RunStatus(&in.Status, &out.Status, s); err != nil {
		return err
	}
	return nil
}

// Convert_v1_Run_To_aggregator_Run is an autogenerated conversion function.
func Convert_v1_Run_To_aggregator_Run(in *Run, out *aggregator.Run, s conversion.Scope) error {
	return autoConvert_v1_Run_To_aggregator_Run(in, out, s)
}

func autoConvert_aggregator_Run_To_v1_Run(in *aggregator.Run, out *Run, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if err := Convert_aggregator_RunSpec_To_v1_RunSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	if err := Convert_aggregator_RunStatus_To_v1_RunStatus(&in.Status, &out.Status, s); err != nil {
		return err
	}
	return nil
}

// Convert_aggregator_Run_To_v1_Run is an autogenerated conversion function.
func Convert_aggregator_Run_To_v1_Run(in *aggregator.Run, out *Run, s conversion.Scope) error {
	return autoConvert_aggregator_Run_To_v1_Run(in, out, s)
}

func autoConvert_v1_RunList_To_aggregator_RunList(in *RunList, out *aggregator.RunList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	out.Items = *(*[]aggregator.Run)(unsafe.Pointer(&in.Items))
	return nil
}

// Convert_v1_RunList_To_aggregator_RunList is an autogenerated conversion function.
func Convert_v1_RunList_To_aggregator_RunList(in *RunList, out *aggregator.RunList, s conversion.Scope) error {
	return autoConvert_v1_RunList_To_aggregator_RunList(in, out, s)
}

func autoConvert_aggregator_RunList_To_v1_RunList(in *aggregator.RunList, out *RunList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	out.Items = *(*[]Run)(unsafe.Pointer(&in.Items))
	return nil
}

// Convert_aggregator_RunList_To_v1_RunList is an autogenerated conversion function.
func Convert_aggregator_RunList_To_v1_RunList(in *aggregator.RunList, out *RunList, s conversion.Scope) error {
	return autoConvert_aggregator_RunList_To_v1_RunList(in, out, s)
}

func autoConvert_v1_RunSpec_To_aggregator_RunSpec(in *RunSpec, out *aggregator.RunSpec, s conversion.Scope) error {
	out.ExperimentName = in.ExperimentName
	out.PodSelector = in.PodSelector
	out.PodCount = in.PodCount
	out.Parameters = *(*[]string)(unsafe.Pointer(&in.Parameters))
	out.Metrics = *(*map[string]string)(unsafe.Pointer(&in.Metrics))
	out.State = common.RunState(in.State)
	out.StartTime = in.StartTime
	out.EndTime = in.EndTime
	return nil
}

// Convert_v1_RunSpec_To_aggregator_RunSpec is an autogenerated conversion function.
func Convert_v1_RunSpec_To_aggregator_RunSpec(in *RunSpec, out *aggregator.RunSpec, s conversion.Scope) error {
	return autoConvert_v1_RunSpec_To_aggregator_RunSpec(in, out, s)
}

func autoConvert_aggregator_RunSpec_To_v1_RunSpec(in *aggregator.RunSpec, out *RunSpec, s conversion.Scope) error {
	out.ExperimentName = in.ExperimentName
	out.PodSelector = in.PodSelector
	out.PodCount = in.PodCount
	out.Parameters = *(*[]string)(unsafe.Pointer(&in.Parameters))
	out.Metrics = *(*map[string]string)(unsafe.Pointer(&in.Metrics))
	out.State = common.RunState(in.State)
	out.StartTime = in.StartTime
	out.EndTime = in.EndTime
	return nil
}

// Convert_aggregator_RunSpec_To_v1_RunSpec is an autogenerated conversion function.
func Convert_aggregator_RunSpec_To_v1_RunSpec(in *aggregator.RunSpec, out *RunSpec, s conversion.Scope) error {
	return autoConvert_aggregator_RunSpec_To_v1_RunSpec(in, out, s)
}

func autoConvert_v1_RunStatus_To_aggregator_RunStatus(in *RunStatus, out *aggregator.RunStatus, s conversion.Scope) error {
	return nil
}

// Convert_v1_RunStatus_To_aggregator_RunStatus is an autogenerated conversion function.
func Convert_v1_RunStatus_To_aggregator_RunStatus(in *RunStatus, out *aggregator.RunStatus, s conversion.Scope) error {
	return autoConvert_v1_RunStatus_To_aggregator_RunStatus(in, out, s)
}

func autoConvert_aggregator_RunStatus_To_v1_RunStatus(in *aggregator.RunStatus, out *RunStatus, s conversion.Scope) error {
	return nil
}

// Convert_aggregator_RunStatus_To_v1_RunStatus is an autogenerated conversion function.
func Convert_aggregator_RunStatus_To_v1_RunStatus(in *aggregator.RunStatus, out *RunStatus, s conversion.Scope) error {
	return autoConvert_aggregator_RunStatus_To_v1_RunStatus(in, out, s)
}
