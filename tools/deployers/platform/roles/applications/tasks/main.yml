---

- name: Create a k8s dls4e namespace
  shell: "kubectl get namespace dls4e || kubectl create namespace dls4e"

- name: Create kubernetes configuration directory
  file:
    path: /root/kubernetes/apps
    state: directory

- name: Render tiller apps
  template:
    src: tiller.yml.j2
    dest: /root/kubernetes/apps/tiller.yml

- name: Apply tiller release
  changed_when: False
  shell: kubectl apply -f /root/kubernetes/apps/tiller.yml

- name: Wait for at least one tiller instances to get ready
  shell: "kubectl --namespace=kube-system get ds tiller -o jsonpath='{.status.numberReady}'"
  changed_when: False
  register: tiller_ready
  until: tiller_ready.stdout | int >= 1
  retries: 60
  delay: 1

- name: Fail if all tiller isntances are down
  fail:
    msg: Tiller did not get up
  when: tiller_ready.stdout == '0'

- name: Verify helm access
  environment: "{{ {'http_proxy': '', 'HTTP_PROXY': '' } }}"
  shell: helm ls
  changed_when: False
  register: helm_access
  until: helm_access|success
  retries: 10
  delay: 10

- name: Copy chart
  copy:
    src: dls4e-platform-{{ carbon_release_package_version }}-{{ carbon_release_package_release }}.tgz
    dest: /tmp/dls4e-platform-{{ carbon_release_package_version }}-{{ carbon_release_package_release }}.tgz

- name: Fetch all interfaces names
  set_fact:
    all_cluster_interfaces: "{{ (all_cluster_interfaces | default([])) + [hostvars[item].internal_interface] }}"
  with_items: "{{ groups['all'] }}"

- name: Render values
  vars:
    dls_release_values:
      global:
        dls4e_registry: "registry.service.{{ nodes_domain }}.{{ domain }}:5000"
      flannel:
        interfaces: "{{ all_cluster_interfaces | sort | unique }}"
        pod_network: "{{ kubernetes_network.pod }}"
      samba-forward:
        ClusterIP: "{{ kubernetes_network.svc_list.samba.ip }}"
      nfs:
        node: "{{ ansible_nodename }}"
      skydns:
        ClusterIP: "{{ kubernetes_network.svc_list.dns.ip }}"
        Domain: "{{ k8s_domain }}.{{ domain }}"
      ingress:
        ClusterIP: "{{ kubernetes_network.svc_list.ingress.ip }}"
  copy:
    content: "{{ dls_release_values | to_nice_yaml(width=50, explicit_start=True, explicit_end=True) }}"
    dest: "/tmp/dls4e-platform-{{ carbon_release_package_version }}-{{ carbon_release_package_release }}.values.yaml"

- name: Install helm chart
  shell: >
    helm upgrade dls4enterprise-k8s-platform
    --namespace kube-system -i
    /tmp/dls4e-platform-{{ carbon_release_package_version }}-{{ carbon_release_package_release }}.tgz --wait
    -f /tmp/dls4e-platform-{{ carbon_release_package_version }}-{{ carbon_release_package_release }}.values.yaml
