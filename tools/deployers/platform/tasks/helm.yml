---

- set_fact:
    helm_bin: helm
    helm_install: "{{ (helm_applications[type] | default('')) == name }}"

- name: Create helm templates directory for {{ name }}
  file:
    path: /root/kubernetes/apps/{{ name }}
    state: directory

- name: Copy {{ name }} template
  copy:
    src: "{{ playbook_dir }}/charts/{{ name }}/"
    dest: "/root/kubernetes/apps/{{ name }}"

- name: Render yaml values file
  copy:
    content: "{{ helm_values | default({}) | combine({'local_release':'DLS-Lite'}) | to_nice_yaml }}"
    dest: "/root/kubernetes/apps/{{ name }}.values.yaml"

- name: List files in directory
  find:
    path: "/root/kubernetes/apps/{{ name }}/"
    get_checksum: True
    recurse: True
  register: files

- name: Get values sha
  stat:
    path: "/root/kubernetes/apps/{{ name }}.values.yaml"
  register: file

- name: Calculate sha of all items
  set_fact:
    files_sha: "{{ ((files | json_query('files[*].checksum') | list) + [file.stat.checksum]) | sort | unique }}"

- name: Check if files sha exists
  stat:
    path: "/root/kubernetes/apps/{{ name }}.shasum"
  register: sha

- name: Get file sha content
  slurp:
    path: "/root/kubernetes/apps/{{ name }}.shasum"
  register: sha_data
  when: sha.stat.exists

- name: Set file sha content
  set_fact:
    sha_data:
      content: ""
  when: not sha.stat.exists

- name: Check if override is required
  set_fact:
    override: "{{ (sha_data.content | b64decode) != files_sha | join(' ') | hash('sha1') }}"

- name: Install and upgrade release
  environment: "{{ {'http_proxy': '', 'HTTP_PROXY': '' } }}"
  shell: >
    helm --host "{{ kubernetes_network.svc_list.tiller.ip }}:{{ kubernetes_network.svc_list.tiller.port }}" upgrade
    --namespace {{ namespace }} -i
    -f "/root/kubernetes/apps/{{ name }}.values.yaml"
    {{ type }} "/root/kubernetes/apps/{{ name }}" --wait
  changed_when: False
  when:
    - helm_install
    - override

- name: Save shasum
  copy:
    content: "{{ files_sha | join(' ') | hash('sha1') }}"
    dest: "/root/kubernetes/apps/{{ name }}.shasum"
  when:
    - helm_install

#- name: Check if release exists
#  environment: "{{ empty_proxy }}"
#  shell: /opt/helm/linux-amd64/helm --host "{{ kubernetes.tiller_svc_ip }}:{{ kubernetes.tiller_svc_port }}" get {{ kind }}
#  register: helm_app
#  changed_when: helm_app.rc == 1
#  failed_when: helm_app.rc not in [0, 1]
#  when: not helm_install
#
#- name: Remove release if it is not required
#  environment: "{{ empty_proxy }}"
#  shell: /opt/helm/linux-amd64/helm --host "{{ kubernetes.tiller_svc_ip }}:{{ kubernetes.tiller_svc_port }}" del --purge {{ kind }}
#  when:
#    - not helm_install
#    - not helm_app|changed
