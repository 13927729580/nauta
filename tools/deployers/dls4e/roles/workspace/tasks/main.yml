---

- name: Ensure exec mod on files
  file:
    path: "{{ item }}"
    mode: +x
  with_items:
    - "{{ runtime_kubectl }}"
    - "{{ runtime_helm }}"
    - "{{ runtime_loader }}"
  delegate_to: "{{ delegation_hostname }}"

- name: Render envs
  set_fact:
    local_envs: "{{ proxy | default({}) | combine({'KUBECONFIG': kubeconfig}) }}"
  delegate_to: "{{ delegation_hostname }}"

- name: Verify helm access
  environment: "{{ local_envs }}"
  shell: "{{ runtime_helm }} init -c --skip-refresh"
  changed_when: False
  delegate_to: "{{ delegation_hostname }}"

- name: Verify helm access
  environment: "{{ local_envs }}"
  shell: "{{ runtime_helm }} ls"
  changed_when: False
  delegate_to: "{{ delegation_hostname }}"

- name: Verify kubernetes access
  environment: "{{ local_envs }}"
  shell: "{{ runtime_kubectl }} get pods"
  changed_when: False
  delegate_to: "{{ delegation_hostname }}"

- name: Check if kubernetes namespace exists
  environment: "{{ local_envs }}"
  shell: "{{ runtime_kubectl }} get ns dls4e"
  register: namespace
  changed_when: namespace.rc in [1]
  failed_when: namespace.rc not in [0, 1]
  delegate_to: "{{ delegation_hostname }}"

- name: Create kubernetes namespace if not exists
  environment: "{{ local_envs }}"
  shell: "{{ runtime_kubectl }} create ns dls4e"
  changed_when: False
  when: namespace is changed
  delegate_to: "{{ delegation_hostname }}"

- name: Fetch all pods
  shell: "{{ runtime_kubectl }} get nodes -o 'jsonpath={.items[*].status.images[*].names[*]}'"
  environment: "{{ local_envs }}"
  changed_when: False
  delegate_to: "{{ delegation_hostname }}"
  register: images

- set_fact:
    pause_image: "{{ (images.stdout.split(' ') | map('regex_search', '.*pause.*') | select('string') | list | sort | unique)[0] }}"

- name: Render kubernetes workspace pod deployment template
  template:
    src: workspace-deployment.yml
    dest: "{{ workspace }}/workspace-deployment.yml"
  delegate_to: "{{ delegation_hostname }}"

- name: Apply kubernetes workspace pod deployment
  environment: "{{ local_envs }}"
  shell: "{{ runtime_kubectl }} apply -f {{ workspace }}/workspace-deployment.yml"
  changed_when: False
  delegate_to: "{{ delegation_hostname }}"

- name: Remove old workspaces
  environment: "{{ local_envs }}"
  shell: "{{ runtime_kubectl }} --namespace=dls4e delete pods -l kind=bootstrap-dls4e-workspace"
  changed_when: False
  delegate_to: "{{ delegation_hostname }}"

- name: Wait for all workspaces to get ready
  environment: "{{ local_envs }}"
  shell: "{{ runtime_kubectl }} --namespace=dls4e get deployment dls4enterprise-workspace-pod -o jsonpath='{.status.readyReplicas}'"
  changed_when: False
  register: workspace_ready
  until: workspace_ready.stdout | int == 2
  retries: 60
  delay: 1
  delegate_to: "{{ delegation_hostname }}"

- name: Fetch all instance names
  environment: "{{ local_envs }}"
  shell: "{{ runtime_kubectl }} get pods -n dls4e -l kind=bootstrap-dls4e-workspace -o jsonpath={.items[*].metadata.name}"
  until: workspaces.stdout.split(' ') | length == 2
  retries: 60
  delay: 1
  changed_when: False
  register: workspaces
  delegate_to: "{{ delegation_hostname }}"

- name: Register provisioner pods
  add_host:
    name: "{{ item }}"
    pod: "{{ item }}"
    groups: provisioner-pods
    delegation_hostname: "{{ delegation_hostname }}"
    workspace: "{{ workspace }}"
    runtime_kubectl: "{{ runtime_kubectl }}"
    runtime_helm: "{{ runtime_helm }}"
    runtime_loader: "{{ runtime_loader }}"
    runtime_img: "{{ runtime_img }}"
    runtime_dls4e_img: "{{ runtime_dls4e_img }}"
    runtime_registry_chart: "{{ runtime_registry_chart }}"
    runtime_dls4e_chart: "{{ runtime_dls4e_chart }}"
    local_envs: "{{ local_envs }}"
  with_items: "{{ workspaces.stdout.split(' ') }}"
