---

- name: Check if image exists
  environment: "{{ local_envs }}"
  shell: "{{ runtime_helm }} status dls4enterprise"
  register: chart
  changed_when: chart.rc == 1
  failed_when: chart.rc not in [0, 1]
  delegate_to: "{{ delegation_hostname }}"

- name: Fail if upgrade is not possible
  fail:
    msg: DLS4E is already installed and upgrade option is not selected
  when:
    - chart is not changed
    - not (upgrade | default(False) | bool)

- name: Set global values in configuration
  set_fact:
    global_values:
      dls4e_registry: "127.0.0.1:{{ registry_nodeport }}"
      dls4e_configuration:
        external_ip: "{{ runtime_external_ip }}"
        registry: "127.0.0.1:{{ registry_nodeport }}"
      dls4e_storage: "{{ calculated_storage }}"
      images:
        - name: tiller
          value: "127.0.0.1:{{ registry_nodeport }}/dls4e/tiller:v2.9.1"
        - name: tensorflow
          value: "dls4e/tensorflow:1.8.0-py3"
        - name: tensorboard
          value: "dls4e/tensorflow:1.8.0-py3"

- name: Render configuration
  set_fact:
    dls4e_config_values:
      global: "{{ dls4e_configuration | default({}) | combine(global_values) }}"
      features: "{{ features | default({}) }}"

- name: Ensure that dls4e registry chart exists
  file:
    path: "{{ runtime_dls4e_chart }}"
  delegate_to: "{{ delegation_hostname }}"

- name: Render values
  vars:
    rendered_values: "{{ features_config | default({}) | combine(dls4e_config_values) }}"
  copy:
    content: "{{ rendered_values | to_nice_yaml(width=50, explicit_start=True, explicit_end=True) }}"
    dest: "{{ workspace }}/dls4e-{{ dls4e_version }}.values.yaml"
  delegate_to: "{{ delegation_hostname }}"

- name: Install helm chart
  environment: "{{ local_envs }}"
  shell: "{{ runtime_helm }} install -n dls4enterprise --namespace dls4e {{ runtime_dls4e_chart }} --wait -f {{ workspace }}/dls4e-{{ dls4e_version }}.values.yaml"
  when: chart is changed
  delegate_to: "{{ delegation_hostname }}"

- name: Upgrade helm chart
  environment: "{{ local_envs }}"
  shell: "{{ runtime_helm }} upgrade dls4enterprise {{ runtime_dls4e_chart }} --wait -f {{ workspace }}/dls4e-{{ dls4e_version }}.values.yaml --recreate-pods"
  when:
    - not chart is changed
    - upgrade | default(False) | bool
  delegate_to: "{{ delegation_hostname }}"

- name: Remove image values file
  file:
    path: "{{ workspace }}/dls4e-{{ dls4e_version }}.values.yaml"
    state: absent
  delegate_to: "{{ delegation_hostname }}"
