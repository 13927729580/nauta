---

- name: Check if image exists
  environment: "{{ local_envs }}"
  shell: "{{ runtime_helm }} status dls4enterprise"
  register: chart
  changed_when: chart.rc == 1
  failed_when: chart.rc not in [0, 1]

- name: Set global values in configuration
  set_fact:
    global_values:
      dls4e_registry: "127.0.0.1:{{ registry_nodeport }}"
      dls4e_configuration:
        external_ip: "{{ runtime_kubernetes_external_name }}"
        registry: "127.0.0.1:{{ registry_nodeport }}"
      dls4e_storage: "{{ calculated_storage }}"
      MasterHost: "{{ (calculated_storage | default({})).local_selector | default('') }}"
      images: "{{ registry_images }}"

- name: Render configuration
  set_fact:
    dls4e_config_values:
      global: "{{ dls4e_configuration | default({}) | combine(global_values) }}"
      features: "{{ features | default({}) }}"

- name: Ensure that dls4e registry chart exists
  file:
    path: "{{ runtime_dls4e_chart }}"

- name: Render values
  vars:
    rendered_values: "{{ features_config | default({}) | combine(dls4e_config_values) }}"
  copy:
    content: "{{ rendered_values | to_nice_yaml(width=50, explicit_start=True, explicit_end=True) }}"
    dest: "{{ workspace }}/dls4e-{{ dls4e_version }}.values.yaml"

- name: Install helm chart
  include_tasks: install.yml
  when: chart is changed

- name: Upgrade helm chart if required
  include_tasks: upgrade.yml
  when:
    - not chart is changed

- name: Remove image values file
  file:
    path: "{{ workspace }}/dls4e-{{ dls4e_version }}.values.yaml"
    state: absent
