---

- name: "{{ message_label }} Get current version of release"
  environment: "{{ local_envs }}"
  shell: "{{ runtime_kubectl }} -n dls4e get cm dls4enterprise -o 'jsonpath={.metadata.labels.dls4e_release_version}'"
  changed_when: False
  register: dls4e_version_remote

- name: "{{ message_label }} Register fact if version is matching"
  set_fact:
    dls4e_version_match: "{{ dls4e_version == dls4e_version_remote.stdout }}"

- name: "{{ message_label }} Upgrade helm chart if required"
  environment: "{{ local_envs }}"
  shell: "{{ runtime_helm }} upgrade dls4enterprise {{ runtime_dls4e_chart }} --timeout 1800 --wait -f {{ workspace }}/dls4e-{{ dls4e_version }}.values.yaml --recreate-pods"
  when:
    - not chart is changed
    - upgrade | default(False) | bool
    - not dls4e_version_match

- name: "{{ message_label }} Fail if upgrade is not possible"
  fail:
    msg: DLS4E is already installed and upgrade option is not selected
  when:
    - chart is not changed
    - not (upgrade | default(False) | bool)
    - not dls4e_version_match
