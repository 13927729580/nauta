---

- name: Pull base image
  docker_image:
    name: "{{ base_build.base_docker_image }}"

- name: Build base image
  changed_when: False
  docker_image:
    path: "{{ base_build.base_docker_definition }}"
    name: "base-build-{{ user }}:{{ build }}"
    pull: False
    push: False
    buildargs: "{{ proxy | combine({'BASE_IMAGE': base_build.base_docker_image }) }}"

- name: Build worker image
  changed_when: False
  docker_image:
    path: "{{ yum_build.base_docker_definition }}"
    name: "yum-build-{{ user }}:{{ build }}"
    pull: False
    push: False
    buildargs: "{{ proxy | combine({'BASE_IMAGE': 'base-build-' + user + ':' + build }) }}"

- name: Create build yum package file handler
  file:
    path: "{{ build_dir }}"
    state: touch

- name: Start build container
  docker_container:
    name: "yum-build-{{ user }}-{{ build }}"
    env: "{{ proxy }}"
    volumes:
      - "{{ build_dir }}:/output"
      - "{{ playbook_dir }}/deployer:/deployer:ro"
    image: "yum-build-{{ user }}:{{ build }}"
    command: bash -c "while true; do sleep 2; done"
    stop_timeout: 0
    recreate: True
    restart_policy: no
  changed_when: False

- name: Start registry container
  docker_container:
    name: "yum-registry-{{ user }}-{{ build }}"
    env: "{{ proxy }}"
    volumes:
      - "{{ build_dir }}:/var/lib/registry"
    ports:
      - 5000
    image: "registry:2"
    stop_timeout: 0
    recreate: True
    restart_policy: no
    user: "{{ user_id }}"
  register: registry
  changed_when: False

- set_fact:
    registry_port: "{{ registry.ansible_facts.docker_container.NetworkSettings.Ports['5000/tcp'][0].HostPort }}"

- name: Register docker container
  add_host:
    name: "yum-build-{{ user }}-{{ build }}"
    group: yum
    ansible_connection: docker
  changed_when: False

- name: Register release instance
  add_host:
    name: "release"
    group: "release-instances"
    ansible_ssh_user: ubuntu
    ansible_ssh_host: dev-3.nervana.sclab.intel.com
    ansible_ssh_port: 22
  changed_when: False

