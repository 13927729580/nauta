apiVersion: apps/v1
kind: Deployment

metadata:
  name: {{ .Release.Name }}
  labels:
    app: {{ template "name" . }}
    chart: {{ template "chart_version" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    draft: {{ .Values.draft }}
    runName: {{ .Release.Name }}
spec:
  replicas: {{ .Values.workersCount }}
  selector:
    matchLabels:
      app: {{ .Chart.Name }}
      release: {{ .Release.Name }}
      chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
      draft: {{ .Values.draft }}
      heritage: {{ .Release.Service }}
      runName: {{ .Release.Name }}
  template:
    metadata:
      annotations:
        buildID: {{ .Values.buildID }}
      labels:
        app: {{ template "name" . }}
        release: {{ .Release.Name }}
        chart: {{ template "chart_version" . }}
        draft: {{ .Values.draft }}
        heritage: {{ .Release.Service }}
        runName: {{ .Release.Name }}
    spec:
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.clusterRepository }}:{{ .Values.image.tag }}"
          env:
            - name: MODEL_NAME
              value: {{ .Values.modelName }}
            - name: MODEL_BASE_PATH
              value: "/models"
          command: ["tensorflow_model_server"]
          args: ["--port=8500", "--rest_api_port=8501", "--model_name=$(MODEL_NAME)", "--model_base_path=$(MODEL_BASE_PATH)/$(MODEL_NAME)"]
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - containerPort: {{ .Values.containerPort }}
          volumeMounts:
            - name: input-home
              mountPath: /mnt/input/home
              readOnly: True
            - name: input-public
              mountPath: /mnt/input/root
              readOnly: True
            - name: output-home
              mountPath: /mnt/output/home
            - name: output-public
              mountPath: /mnt/output/root
            - name: output-home
              mountPath: /mnt/output/experiment
              subPath: {{ .Values.experimentName }}
            - name: models
              mountPath: "/models"
          securityContext:
            privileged: true
          resources:
{{ toYaml .Values.resources | indent 12 }}
      restartPolicy: Always
      volumes:
        - name: input-home
          persistentVolumeClaim:
            claimName: input-home
        - name: input-public
          persistentVolumeClaim:
            claimName: input-public
        - name: output-home
          persistentVolumeClaim:
            claimName: output-home
        - name: output-public
          persistentVolumeClaim:
            claimName: output-public
        - name: models
          emptyDir: {}
      initContainers:
        - name: init-stream-inference-pod
          image: "{{ .Values.image.clusterRepository }}:{{ .Values.image.tag }}"
          command: ['bash', '-c', 'mkdir -p "/mnt/output/home/{{ .Values.experimentName }}" && cp -r "{{ .Values.modelPath }}" /models']
          volumeMounts:
            - name: input-home
              mountPath: /mnt/input/home
              readOnly: True
            - name: input-public
              mountPath: /mnt/input/root
              readOnly: True
            - name: output-home
              mountPath: /mnt/output/home
            - name: output-public
              mountPath: /mnt/output/root
            - name: output-home
              mountPath: /mnt/output/experiment
              subPath: {{ .Values.experimentName }}
            - name: models
              mountPath: "/models"
  backoffLimit: 5